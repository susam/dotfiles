#!/bin/sh

echo Loading shell environment ... >&2

# Convenience functions for running Emacs in various ways.
em() {
    if [ "$#" -eq 0 ]
    then
        echo "Starting new Emacs process ..." >&2
        emacs & disown
    elif emacsclient -n "$@" 2> /dev/null
    then
        echo "Opened $@ in Emacs server" >&2
    else
        echo "Opening $@ in a new Emacs process ..." >&2
        emacs "$@" & disown
    fi
}

ec() {
    emacsclient "$@"
}

en() {
    emacs -nw "$@"
}

fgcol() {
    for i in {0..255}; do tput setaf $i; printf "$i "; done; echo
}

bgcol() {
    for i in {0..255}; do tput setab $i; printf "$i "; done; echo
}

# Set my Git user details locally in the current repository.
gitme() {
    git config user.name "Susam Pal"
    git config user.email susam@susam.net
    git config user.name
    git config user.email
}

# Show the current effective Git user.
gitwho() {
    git config user.name
    git config user.email
}

# Clone GitHub repository.
ghclone() {
    cd ~/git
    pwd
    if [ $# -eq 1 ]
    then
        git clone "https://github.com/susam/$1.git"
        cd "$1"
    else
        git clone "https://github.com/$1/$2.git"
        cd "$2"
    fi
    pwd
}

# Go to the top-level directory of the current project.
gcd() {
    check_path=$PWD
    while [ "$check_path" != / ]
    do
        [ -d "$check_path/.git" ] && cd "$check_path" && break
        check_path=${check_path%/*}
    done
}

# OCR PDFs.
ocr()
{
    for f in "$@"
    do
        echo "OCRing $f ..."
        ocrmypdf "$f" "${f%.pdf}-ocr.pdf"
        mv "$f" "$f.bkp"
        mv "${f%.pdf}-ocr.pdf" "$f"
        ls -lh "$f.bkp"
        ls -lh "$f"
    done
}

# Show message box with a message.
alert() {
    if command -v osascript
    then
        osascript -e "tell app \"System Events\" to display alert \"$*\""
    else
        echo "$*" >&2
    fi > /dev/null
}

# Redshift
red()
{
    case $1 in
        off)
            pkill redshift
            ;;
        [0-9]*)
            pkill redshift
            pkill redshift
            redshift -v -l 0:0 -t $1:$1 > ~/redshift.log 2>&1 &
            ;;
        bed)
            pkill redshift
            pkill redshift
            redshift -v -l 13:77 -t 3400:1900 > ~/redshift.log 2>&1 &
            ;;
        "")
            pkill redshift
            pkill redshift
            redshift -v -l 13:77 -t 5000:3400 > ~/redshift.log 2>&1 &
            ;;
        *)
            echo 'Usage: red [off | bed | <temperature>]' >&2
            ;;
    esac
}

# Clean environment.
dirclean() {
    find . -name "__pycache__" -exec rm -v -r {} +
    find . -name "*.pyc" -exec rm -v {} +
    find . -name ".DS_Store" -exec rm -v {} +
}

# Search texlive for file
findtl()
{
    find /usr/local/texlive -name "*$1*"
}

grepx()
{
    grep -r --exclude-dir=".[^/]*" --exclude-dir=.git "$1" .
}

findx()
{
    find . | grep -vE "/\.|__pycache__" | grep "$1"
}


# Apple documentation for keyboard usage IDs:
# https://developer.apple.com/library/archive/technotes/tn2450/_index.html

# Remap keys in Mac British keyboard to US layout keys.
mbk()
{
    # section/plus-minus (0x64) -> backquote/tilde (0x35)
    # return (0x28) -> \| (0x31)
    # \| (0x31) -> return (0x28)
    # non-us ~# (0x32) (absent) -> return (0x28) (transition)
    hidutil property --set '{"UserKeyMapping": [
      {
        "HIDKeyboardModifierMappingSrc": 0x700000064,
        "HIDKeyboardModifierMappingDst": 0x700000035
      },
      {
        "HIDKeyboardModifierMappingSrc": 0x700000028,
        "HIDKeyboardModifierMappingDst": 0x700000031
      },
      {
        "HIDKeyboardModifierMappingSrc": 0x700000031,
        "HIDKeyboardModifierMappingDst": 0x700000028
      },
      {
        "HIDKeyboardModifierMappingSrc": 0x700000032,
        "HIDKeyboardModifierMappingDst": 0x700000028
      }
    ]}'
}

# Remap keys in external British keyboard to Macbook US layout keys.
ebk()
{
    # return (0x28) -> non-us ~# (but types \|) (0x32)
    # \| (0x31) (absent) -> return (0x28) (transition)
    # non-us ~# (0x32) (but types \|) -> return (0x28)
    # left alt (0xe2) -> left gui (0xe3)
    # left gui (0xe3) -> left alt (0xe2)
    hidutil property --set '{"UserKeyMapping": [
      {
        "HIDKeyboardModifierMappingSrc": 0x700000028,
        "HIDKeyboardModifierMappingDst": 0x700000032
      },
      {
        "HIDKeyboardModifierMappingSrc": 0x700000031,
        "HIDKeyboardModifierMappingDst": 0x700000028
      },
      {
        "HIDKeyboardModifierMappingSrc": 0x700000032,
        "HIDKeyboardModifierMappingDst": 0x700000028
      },
      {
        "HIDKeyboardModifierMappingSrc": 0x7000000e2,
        "HIDKeyboardModifierMappingDst": 0x7000000e3
      },
      {
        "HIDKeyboardModifierMappingSrc": 0x7000000e3,
        "HIDKeyboardModifierMappingDst": 0x7000000e2
      }
    ]}'
}

nok()
{
    hidutil property --set '{"UserKeyMapping": []}'
}

# Set environment.
PATH=~/bin:$PATH

_begin_esc()
{
    [ -n "$BASH_VERSION" ] && printf '\x01' && return
    [ -n "$ZSH_VERSION" ] && printf '%%{' && return
}

_end_esc()
{
    [ -n "$BASH_VERSION" ] && printf '\x02' && return
    [ -n "$ZSH_VERSION" ] && printf '%%}' && return
}

# Set terminal color.
_tput_color()
{
    _begin_esc
    tput setaf "$1"
    _end_esc
}

# Reset terminal color.
_tput_reset()
{
    _begin_esc
    tput sgr0
    _end_esc
}

# Color palette.
if [ -n "$INSIDE_EMACS" ]
then
    YELLOW=226
    GREEN=40
    ORANGE=214
else
    YELLOW=11
    GREEN=2
    ORANGE=172
fi

# Create dynamic prompt string for PS1.
_active_prompt()
{
    # Git branch
    git_branch=$(git branch 2> /dev/null | sed -n "s/^\* *//p")
    if [ -n "$git_branch" ]
    then
        _tput_color "$YELLOW"
        printf '[%s] ' "$git_branch"
    fi
    unset git_branch

    # Current directory
    if [ "$PWD" != "$HOME" ]
    then
        if printf '%s' "$PWD" | grep -q "^$HOME"
        then
            neat_path="~${PWD#$HOME}"
        else
            neat_path=$PWD
        fi
        _tput_color "$GREEN"
        printf '%s' "$neat_path"
        unset neat_path
    fi

    # Dollar or beer sign
    _tput_color "$ORANGE"
    if [ -n "$_PROMPT_MARK" ]
    then
        printf '%s' "$_PROMPT_MARK"
    elif [ $(date +"%a") = Fri ]
    then
        printf '%s' "$_beer "
    elif [ $(date +"%a") = Sat ]
    then
        printf '%s' "$_beer$_beer "
    else
        printf '$ '
    fi
    _tput_reset
}

# Aliases to modify the ending characters of the primary prompt.
_beer=$(printf "\xf0\x9f\x8d\xba")
alias dollar='_PROMPT_MARK="$ "'
alias beer='_PROMPT_MARK="$_beer "'
alias beer2='_PROMPT_MARK="$_beer$_beer "'

# Aliases for Timeboxing.
alias tm='timebox'
alias tmt='grep "$(date +"%Y-%m-%d")" ~/timebox.log'
alias tml='tmt; echo [ $(tmt | wc -l) ]'
alias tmla='cat ~/timebox.log'
alias tmc='cut -d" " -f1 ~/timebox.log | uniq -c'
alias tmu='sed \$d ~/timebox.log > ~/t.new && mv ~/t.new ~/timebox.log && tml'
alias tmr=': > ~/timebox.log'

# Reclaim C-s for forward incremental search.
stty -ixon

# Aliases for Common Lisp.
alias cl='sbcl --noinform --quit --load'

args() {
    for arg in "$@"
    do
        echo "arg: \"$arg\""
    done
}

alias c++11="c++ -g -std=c++11 -Wall -Wextra -pedantic"

# Set the primary prompt string.
PS1='$(_active_prompt)'

# For specific shells only.
if [ -n "$BASH_VERSION" ]
then
    echo Loading Bash environment ... >&2

    [ -r "/usr/local/etc/profile.d/bash_completion.sh" ] &&
       . "/usr/local/etc/profile.d/bash_completion.sh"
elif [ -n "$ZSH_VERSION" ]
then
    echo Loading ZSH environment ... >&2

    setopt prompt_subst
    autoload bashcompinit && bashcompinit
    autoload compinit && compinit
fi

[ -f ~/my/bin/shrc ] && . ~/my/bin/shrc
[ -f ~/ws/bin/shrc ] && . ~/ws/bin/shrc

# Attach to an existing Screen session or launch a new one.
# [ -n "$STY$TMUX" ] || screen -dRR

# Attach to an existing tmux or a launch new tmux.
[ -n "$STY$TMUX$INSIDE_EMACS" ] || tmux at || tmux

echo Done >&2
