#!/bin/sh

# The MIT License (MIT)
#
# Copyright (c) 2015-2016 Susam Pal
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Files for which symbolic links need to be set up.
#
# Each line contains a filename that must be present in the current
# directory. A dot (.) is added to each filename and a symbolic link
# with this name is set up in the home directory.
DOT_FILES="
vimrc
plugins.vimrc
tmux.conf
Xresources
"

VERSION=0.1.1
AUTHOR="Susam Pal"
COPYRIGHT="Copyright (c) 2015-2016 $AUTHOR"

LICENSE_URL="http://susam.in/licenses/mit/"
SUPPORT_URL="https://github.com/susam/dotfiles/issues"

NOTICE="
This is free and open source software. You can use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of it,
under the terms of the MIT License. You can obtain a copy of the
MIT License at <$LICENSE_URL>.

This software is provided \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
express or implied. See the MIT License for details.
"

NAME=${0##*/}


# Starting point of this script.
#
# Arguments:
#   arg...: All arguments this script was invoked with.
main()
{
    parse_arguments "$@"

    if [ $undo = no ]
    then
        setup_dot_files
    else
        undo_dot_files
    fi
}


# Parse command line arguments passed to this script.
#
# Arguments:
#   arg...: All arguments this script was invoked with.
#
# Errors:
#   If invalid arguments are specified, this function causes the script
#   to exit with an error.
parse_arguments()
{
    # Default options.
    undo=no

    # Parse command line options.
    while [ "$#" -gt 0 ]
    do
        case $1 in
            -u | --undo)
                undo=yes
                shift
                ;;
            -h | --help)
                show_help
                exit
                ;;
            -v | --version)
                show_version
                exit
                ;;
            -?*)
                quit Unknown option \""$1"\".
                ;;
            *)
                quit Surplus argument \""$1"\".
                ;;
        esac
    done
}


# Create symbolic links for dot-files.
setup_dot_files()
{
    printf "%s" "$DOT_FILES" | grep [[:graph:]] | while read filename
    do
        target="$PWD/$filename"
        link=~/."$filename"

        if [ -f "$link" ]
        then
            err Link "$link" already exists.
        elif [ ! -f "$target" ]
        then
            err File "$target" does not exist.
        elif ln -s "$target" "$link"
        then
            printf "Created %s -> %s\n" "$link" "$target".
        fi
    done
}


# Delete symbolic links for dot-files.
undo_dot_files()
{
    printf "%s" "$DOT_FILES" | grep [[:graph:]] | while read filename
    do
        link=~/."$filename"
        if [ ! -f "$link" ]
        then
            err Link "$link" does not exist.
        elif rm "$link"
        then
            printf "Deleted %s\n" "$link".
        fi
    done
}


# Print error message.
#
# Arguments:
#   string...: String to print to standard error stream.
#
# Errors:
#   Unconditionally causs the script to terminate with an error message
#   and exit code 1.
err()
{
    printf "%s: %s\n" "$NAME" "$*" >&2
}


# Terminate the script with an error message.
#
# Arguments:
#   string...: String to print to standard error stream.
#
# Errors:
#   Unconditionally causes the script to terminate with an error message
#   and exit code 1.
quit()
{
    err "$*"
    exit 1
}


# Show help.
show_help()
{
    printf "%s\n" \
"Usage: $NAME [-u] [-h] [-v]

Set up dot-files in home directory.

Options:
  -u, --undo     Undo setup.
  -h, --help     Show this help and exit.
  -v, --version  Show version and exit.

Report bugs to <$SUPPORT_URL>."
}


# Show version and copyright.
show_version()
{
    printf "%s %s\n%s\n" "$NAME" "$VERSION" "$COPYRIGHT"
}


# Start.
main "$@"
